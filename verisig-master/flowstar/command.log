mode: initD_initN,	time = 0.000001,	step = 0.000001,	order = 3
custom output: from: initD_initN, to: _DNN1, jumps execuded: 0, branch id: 1, jump id: 2 
Dealing with the jump from initD_initN to _DNN1 ...
jumps = 0
branch id: 1
_f1 bounds after reset: [ 0.5000000000,  0.5000000000]
_f1 remainder after reset: [-0.0000000000,  0.0000000000]
_f2 bounds after reset: [-0.0000000000,  0.0000000000]
_f2 remainder after reset: [-0.0000000000,  0.0000000000]
_f3 bounds after reset: [-0.0000000000,  0.0000000000]
_f3 remainder after reset: [-0.0000000000,  0.0000000000]
_f4 bounds after reset: [-0.0000000000,  0.0000000000]
_f4 remainder after reset: [-0.0000000000,  0.0000000000]
clockD bounds after reset: [ 0.0000000000,  0.0000000000]
clockD remainder after reset: [ 0.0000000000,  0.0000000000]
FD bounds after reset: [-0.0000000000,  0.0000000000]
FD remainder after reset: [-0.0000000000,  0.0000000000]
posD bounds after reset: [ 0.5000000000,  0.5000000000]
posD remainder after reset: [-0.0000000000,  0.0000000000]
thetaD bounds after reset: [-0.0000000000,  0.0000000000]
thetaD remainder after reset: [-0.0000000000,  0.0000000000]
dposD bounds after reset: [-0.0000000000,  0.0000000000]
dposD remainder after reset: [-0.0000000000,  0.0000000000]
dthetaD bounds after reset: [-0.0000000000,  0.0000000000]
dthetaD remainder after reset: [-0.0000000000,  0.0000000000]
costD bounds after reset: [-0.0000000000,  0.0000000000]
costD remainder after reset: [-0.0000000000,  0.0000000000]
clockN bounds after reset: [ 0.0000000000,  0.0000000000]
clockN remainder after reset: [ 0.0000000000,  0.0000000000]
FN bounds after reset: [-0.0000000000,  0.0000000000]
FN remainder after reset: [-0.0000000000,  0.0000000000]
posN bounds after reset: [ 0.5000000000,  0.5000000000]
posN remainder after reset: [-0.0000000000,  0.0000000000]
thetaN bounds after reset: [-0.0000000000,  0.0000000000]
thetaN remainder after reset: [-0.0000000000,  0.0000000000]
dposN bounds after reset: [-0.0000000000,  0.0000000000]
dposN remainder after reset: [-0.0000000000,  0.0000000000]
dthetaN bounds after reset: [-0.0000000000,  0.0000000000]
dthetaN remainder after reset: [-0.0000000000,  0.0000000000]
costN bounds after reset: [-0.0000000000,  0.0000000000]
costN remainder after reset: [-0.0000000000,  0.0000000000]
clockG bounds after reset: [-0.0000000000,  0.0000009766]
clockG remainder after reset: [-0.0000004883,  0.0000004883]
clock bounds after reset: [-0.0000000000,  0.0000000000]
clock remainder after reset: [-0.0000000000,  0.0000000000]
Done.
mode: _DNN1,	time = 0.000001,	step = 0.000001,	order = 3
custom output: from: _DNN1, to: DNN1, jumps execuded: 1, branch id: 1, jump id: 1 
Dealing with the jump from _DNN1 to DNN1 ...
jumps = 1
branch id: 1
Loading neural networks...
Jumping to layer 1
Performing linear reset...
Jumping to layer 2
Performing linear reset...
Performing preconditioning...
Performing activation reset...
Jumping to layer 3
Performing linear reset...
Performing preconditioning...
Performing activation reset...
Jumping to layer 4
Performing linear reset...
Performing preconditioning...
Performing activation reset...
Jumping to layer 5
Performing linear reset...
Performing preconditioning...
Performing activation reset...
Jumping to layer 6
Performing linear reset...
Performing preconditioning...
Performing activation reset...
_f1 bounds after reset: [ 0.9986637145,  0.9986637145]
_f1 remainder after reset: [-0.0000000000,  0.0000000000]
_f2 bounds after reset: [ 0.5000000000,  0.5000000000]
_f2 remainder after reset: [ 0.0000000000,  0.0000000000]
_f3 bounds after reset: [ 0.5000000000,  0.5000000000]
_f3 remainder after reset: [ 0.0000000000,  0.0000000000]
_f4 bounds after reset: [ 0.5000000000,  0.5000000000]
_f4 remainder after reset: [ 0.0000000000,  0.0000000000]
clockD bounds after reset: [-0.0000000000,  0.0000000000]
clockD remainder after reset: [-0.0000000000,  0.0000000000]
FD bounds after reset: [-0.0000000000,  0.0000000000]
FD remainder after reset: [-0.0000000000,  0.0000000000]
posD bounds after reset: [ 0.5000000000,  0.5000000000]
posD remainder after reset: [-0.0000000000,  0.0000000000]
thetaD bounds after reset: [-0.0000000000,  0.0000000000]
thetaD remainder after reset: [-0.0000000000,  0.0000000000]
dposD bounds after reset: [-0.0000000000,  0.0000000000]
dposD remainder after reset: [-0.0000000000,  0.0000000000]
dthetaD bounds after reset: [-0.0000000000,  0.0000000000]
dthetaD remainder after reset: [-0.0000000000,  0.0000000000]
costD bounds after reset: [-0.0000000000,  0.0000000000]
costD remainder after reset: [-0.0000000000,  0.0000000000]
clockN bounds after reset: [-0.0000000000,  0.0000000000]
clockN remainder after reset: [-0.0000000000,  0.0000000000]
FN bounds after reset: [-0.0000000000,  0.0000000000]
FN remainder after reset: [-0.0000000000,  0.0000000000]
posN bounds after reset: [ 0.5000000000,  0.5000000000]
posN remainder after reset: [-0.0000000000,  0.0000000000]
thetaN bounds after reset: [-0.0000000000,  0.0000000000]
thetaN remainder after reset: [-0.0000000000,  0.0000000000]
dposN bounds after reset: [-0.0000000000,  0.0000000000]
dposN remainder after reset: [-0.0000000000,  0.0000000000]
dthetaN bounds after reset: [-0.0000000000,  0.0000000000]
dthetaN remainder after reset: [-0.0000000000,  0.0000000000]
costN bounds after reset: [-0.0000000000,  0.0000000000]
costN remainder after reset: [-0.0000000000,  0.0000000000]
clockG bounds after reset: [-0.0000000000,  0.0000019531]
clockG remainder after reset: [-0.0000009766,  0.0000009766]
clock bounds after reset: [ 0.0000000000,  0.0000000000]
clock remainder after reset: [ 0.0000000000,  0.0000000000]
Done.
mode: DNN1,	time = 0.000001,	step = 0.000001,	order = 3
custom output: from: DNN1, to: environmmentD_environmentN, jumps execuded: 2, branch id: 1, jump id: 3 
Dealing with the jump from DNN1 to environmmentD_environmentN ...
jumps = 2
branch id: 1
_f1 bounds after reset: [ 0.9986637145,  0.9986637145]
_f1 remainder after reset: [-0.0000000000,  0.0000000000]
_f2 bounds after reset: [ 0.5000000000,  0.5000000000]
_f2 remainder after reset: [-0.0000000000,  0.0000000000]
_f3 bounds after reset: [ 0.5000000000,  0.5000000000]
_f3 remainder after reset: [-0.0000000000,  0.0000000000]
_f4 bounds after reset: [ 0.5000000000,  0.5000000000]
_f4 remainder after reset: [-0.0000000000,  0.0000000000]
clockD bounds after reset: [ 0.0000000000,  0.0000000000]
clockD remainder after reset: [ 0.0000000000,  0.0000000000]
FD bounds after reset: [ 1.9946548579,  1.9946548579]
FD remainder after reset: [-0.0000000000,  0.0000000000]
posD bounds after reset: [ 0.5000000000,  0.5000000000]
posD remainder after reset: [-0.0000000000,  0.0000000000]
thetaD bounds after reset: [-0.0000000000,  0.0000000000]
thetaD remainder after reset: [-0.0000000000,  0.0000000000]
dposD bounds after reset: [-0.0000000000,  0.0000000000]
dposD remainder after reset: [-0.0000000000,  0.0000000000]
dthetaD bounds after reset: [-0.0000000000,  0.0000000000]
dthetaD remainder after reset: [-0.0000000000,  0.0000000000]
costD bounds after reset: [-0.0000000000,  0.0000000000]
costD remainder after reset: [-0.0000000000,  0.0000000000]
clockN bounds after reset: [ 0.0000000000,  0.0000000000]
clockN remainder after reset: [ 0.0000000000,  0.0000000000]
FN bounds after reset: [-2.0000000000, -2.0000000000]
FN remainder after reset: [ 0.0000000000,  0.0000000000]
posN bounds after reset: [ 0.5000000000,  0.5000000000]
posN remainder after reset: [-0.0000000000,  0.0000000000]
thetaN bounds after reset: [-0.0000000000,  0.0000000000]
thetaN remainder after reset: [-0.0000000000,  0.0000000000]
dposN bounds after reset: [-0.0000000000,  0.0000000000]
dposN remainder after reset: [-0.0000000000,  0.0000000000]
dthetaN bounds after reset: [-0.0000000000,  0.0000000000]
dthetaN remainder after reset: [-0.0000000000,  0.0000000000]
costN bounds after reset: [-0.0000000000,  0.0000000000]
costN remainder after reset: [-0.0000000000,  0.0000000000]
clockG bounds after reset: [-0.0000000000,  0.0000029297]
clockG remainder after reset: [-0.0000014648,  0.0000014648]
clock bounds after reset: [-0.0000000000,  0.0000009766]
clock remainder after reset: [-0.0000004883,  0.0000004883]
Done.
custom output: from: DNN1, to: environmmentD_environmentN, jumps execuded: 2, branch id: 1, jump id: 4 
Dealing with the jump from DNN1 to environmmentD_environmentN ...
jumps = 2
branch id: 1
_f1 bounds after reset: [ 0.9986637145,  0.9986637145]
_f1 remainder after reset: [-0.0000000000,  0.0000000000]
_f2 bounds after reset: [ 0.5000000000,  0.5000000000]
_f2 remainder after reset: [-0.0000000000,  0.0000000000]
_f3 bounds after reset: [ 0.5000000000,  0.5000000000]
_f3 remainder after reset: [-0.0000000000,  0.0000000000]
_f4 bounds after reset: [ 0.5000000000,  0.5000000000]
_f4 remainder after reset: [-0.0000000000,  0.0000000000]
clockD bounds after reset: [ 0.0000000000,  0.0000000000]
clockD remainder after reset: [ 0.0000000000,  0.0000000000]
FD bounds after reset: [ 1.9946548579,  1.9946548579]
FD remainder after reset: [-0.0000000000,  0.0000000000]
posD bounds after reset: [ 0.5000000000,  0.5000000000]
posD remainder after reset: [-0.0000000000,  0.0000000000]
thetaD bounds after reset: [-0.0000000000,  0.0000000000]
thetaD remainder after reset: [-0.0000000000,  0.0000000000]
dposD bounds after reset: [-0.0000000000,  0.0000000000]
dposD remainder after reset: [-0.0000000000,  0.0000000000]
dthetaD bounds after reset: [-0.0000000000,  0.0000000000]
dthetaD remainder after reset: [-0.0000000000,  0.0000000000]
costD bounds after reset: [-0.0000000000,  0.0000000000]
costD remainder after reset: [-0.0000000000,  0.0000000000]
clockN bounds after reset: [ 0.0000000000,  0.0000000000]
clockN remainder after reset: [ 0.0000000000,  0.0000000000]
FN bounds after reset: [-1.0000000000, -1.0000000000]
FN remainder after reset: [ 0.0000000000,  0.0000000000]
posN bounds after reset: [ 0.5000000000,  0.5000000000]
posN remainder after reset: [-0.0000000000,  0.0000000000]
thetaN bounds after reset: [-0.0000000000,  0.0000000000]
thetaN remainder after reset: [-0.0000000000,  0.0000000000]
dposN bounds after reset: [-0.0000000000,  0.0000000000]
dposN remainder after reset: [-0.0000000000,  0.0000000000]
dthetaN bounds after reset: [-0.0000000000,  0.0000000000]
dthetaN remainder after reset: [-0.0000000000,  0.0000000000]
costN bounds after reset: [-0.0000000000,  0.0000000000]
costN remainder after reset: [-0.0000000000,  0.0000000000]
clockG bounds after reset: [-0.0000000000,  0.0000029297]
clockG remainder after reset: [-0.0000014648,  0.0000014648]
clock bounds after reset: [-0.0000000000,  0.0000009766]
clock remainder after reset: [-0.0000004883,  0.0000004883]
Done.
custom output: from: DNN1, to: environmmentD_environmentN, jumps execuded: 2, branch id: 1, jump id: 5 
Dealing with the jump from DNN1 to environmmentD_environmentN ...
jumps = 2
branch id: 1
_f1 bounds after reset: [ 0.9986637145,  0.9986637145]
_f1 remainder after reset: [-0.0000000000,  0.0000000000]
_f2 bounds after reset: [ 0.5000000000,  0.5000000000]
_f2 remainder after reset: [-0.0000000000,  0.0000000000]
_f3 bounds after reset: [ 0.5000000000,  0.5000000000]
_f3 remainder after reset: [-0.0000000000,  0.0000000000]
_f4 bounds after reset: [ 0.5000000000,  0.5000000000]
_f4 remainder after reset: [-0.0000000000,  0.0000000000]
clockD bounds after reset: [ 0.0000000000,  0.0000000000]
clockD remainder after reset: [ 0.0000000000,  0.0000000000]
FD bounds after reset: [ 1.9946548579,  1.9946548579]
FD remainder after reset: [-0.0000000000,  0.0000000000]
posD bounds after reset: [ 0.5000000000,  0.5000000000]
posD remainder after reset: [-0.0000000000,  0.0000000000]
thetaD bounds after reset: [-0.0000000000,  0.0000000000]
thetaD remainder after reset: [-0.0000000000,  0.0000000000]
dposD bounds after reset: [-0.0000000000,  0.0000000000]
dposD remainder after reset: [-0.0000000000,  0.0000000000]
dthetaD bounds after reset: [-0.0000000000,  0.0000000000]
dthetaD remainder after reset: [-0.0000000000,  0.0000000000]
costD bounds after reset: [-0.0000000000,  0.0000000000]
costD remainder after reset: [-0.0000000000,  0.0000000000]
clockN bounds after reset: [ 0.0000000000,  0.0000000000]
clockN remainder after reset: [ 0.0000000000,  0.0000000000]
FN bounds after reset: [ 0.0000000000,  0.0000000000]
FN remainder after reset: [ 0.0000000000,  0.0000000000]
posN bounds after reset: [ 0.5000000000,  0.5000000000]
posN remainder after reset: [-0.0000000000,  0.0000000000]
thetaN bounds after reset: [-0.0000000000,  0.0000000000]
thetaN remainder after reset: [-0.0000000000,  0.0000000000]
dposN bounds after reset: [-0.0000000000,  0.0000000000]
dposN remainder after reset: [-0.0000000000,  0.0000000000]
dthetaN bounds after reset: [-0.0000000000,  0.0000000000]
dthetaN remainder after reset: [-0.0000000000,  0.0000000000]
costN bounds after reset: [-0.0000000000,  0.0000000000]
costN remainder after reset: [-0.0000000000,  0.0000000000]
clockG bounds after reset: [-0.0000000000,  0.0000029297]
clockG remainder after reset: [-0.0000014648,  0.0000014648]
clock bounds after reset: [-0.0000000000,  0.0000009766]
clock remainder after reset: [-0.0000004883,  0.0000004883]
Done.
custom output: from: DNN1, to: environmmentD_environmentN, jumps execuded: 2, branch id: 1, jump id: 6 
Dealing with the jump from DNN1 to environmmentD_environmentN ...
jumps = 2
branch id: 1
_f1 bounds after reset: [ 0.9986637145,  0.9986637145]
_f1 remainder after reset: [-0.0000000000,  0.0000000000]
_f2 bounds after reset: [ 0.5000000000,  0.5000000000]
_f2 remainder after reset: [-0.0000000000,  0.0000000000]
_f3 bounds after reset: [ 0.5000000000,  0.5000000000]
_f3 remainder after reset: [-0.0000000000,  0.0000000000]
_f4 bounds after reset: [ 0.5000000000,  0.5000000000]
_f4 remainder after reset: [-0.0000000000,  0.0000000000]
clockD bounds after reset: [ 0.0000000000,  0.0000000000]
clockD remainder after reset: [ 0.0000000000,  0.0000000000]
FD bounds after reset: [ 1.9946548579,  1.9946548579]
FD remainder after reset: [-0.0000000000,  0.0000000000]
posD bounds after reset: [ 0.5000000000,  0.5000000000]
posD remainder after reset: [-0.0000000000,  0.0000000000]
thetaD bounds after reset: [-0.0000000000,  0.0000000000]
thetaD remainder after reset: [-0.0000000000,  0.0000000000]
dposD bounds after reset: [-0.0000000000,  0.0000000000]
dposD remainder after reset: [-0.0000000000,  0.0000000000]
dthetaD bounds after reset: [-0.0000000000,  0.0000000000]
dthetaD remainder after reset: [-0.0000000000,  0.0000000000]
costD bounds after reset: [-0.0000000000,  0.0000000000]
costD remainder after reset: [-0.0000000000,  0.0000000000]
clockN bounds after reset: [ 0.0000000000,  0.0000000000]
clockN remainder after reset: [ 0.0000000000,  0.0000000000]
FN bounds after reset: [ 1.0000000000,  1.0000000000]
FN remainder after reset: [ 0.0000000000,  0.0000000000]
posN bounds after reset: [ 0.5000000000,  0.5000000000]
posN remainder after reset: [-0.0000000000,  0.0000000000]
thetaN bounds after reset: [-0.0000000000,  0.0000000000]
thetaN remainder after reset: [-0.0000000000,  0.0000000000]
dposN bounds after reset: [-0.0000000000,  0.0000000000]
dposN remainder after reset: [-0.0000000000,  0.0000000000]
dthetaN bounds after reset: [-0.0000000000,  0.0000000000]
dthetaN remainder after reset: [-0.0000000000,  0.0000000000]
costN bounds after reset: [-0.0000000000,  0.0000000000]
costN remainder after reset: [-0.0000000000,  0.0000000000]
clockG bounds after reset: [-0.0000000000,  0.0000029297]
clockG remainder after reset: [-0.0000014648,  0.0000014648]
clock bounds after reset: [-0.0000000000,  0.0000009766]
clock remainder after reset: [-0.0000004883,  0.0000004883]
Done.
custom output: from: DNN1, to: environmmentD_environmentN, jumps execuded: 2, branch id: 1, jump id: 7 
Dealing with the jump from DNN1 to environmmentD_environmentN ...
jumps = 2
branch id: 1
_f1 bounds after reset: [ 0.9986637145,  0.9986637145]
_f1 remainder after reset: [-0.0000000000,  0.0000000000]
_f2 bounds after reset: [ 0.5000000000,  0.5000000000]
_f2 remainder after reset: [-0.0000000000,  0.0000000000]
_f3 bounds after reset: [ 0.5000000000,  0.5000000000]
_f3 remainder after reset: [-0.0000000000,  0.0000000000]
_f4 bounds after reset: [ 0.5000000000,  0.5000000000]
_f4 remainder after reset: [-0.0000000000,  0.0000000000]
clockD bounds after reset: [ 0.0000000000,  0.0000000000]
clockD remainder after reset: [ 0.0000000000,  0.0000000000]
FD bounds after reset: [ 1.9946548579,  1.9946548579]
FD remainder after reset: [-0.0000000000,  0.0000000000]
posD bounds after reset: [ 0.5000000000,  0.5000000000]
posD remainder after reset: [-0.0000000000,  0.0000000000]
thetaD bounds after reset: [-0.0000000000,  0.0000000000]
thetaD remainder after reset: [-0.0000000000,  0.0000000000]
dposD bounds after reset: [-0.0000000000,  0.0000000000]
dposD remainder after reset: [-0.0000000000,  0.0000000000]
dthetaD bounds after reset: [-0.0000000000,  0.0000000000]
dthetaD remainder after reset: [-0.0000000000,  0.0000000000]
costD bounds after reset: [-0.0000000000,  0.0000000000]
costD remainder after reset: [-0.0000000000,  0.0000000000]
clockN bounds after reset: [ 0.0000000000,  0.0000000000]
clockN remainder after reset: [ 0.0000000000,  0.0000000000]
FN bounds after reset: [ 2.0000000000,  2.0000000000]
FN remainder after reset: [ 0.0000000000,  0.0000000000]
posN bounds after reset: [ 0.5000000000,  0.5000000000]
posN remainder after reset: [-0.0000000000,  0.0000000000]
thetaN bounds after reset: [-0.0000000000,  0.0000000000]
thetaN remainder after reset: [-0.0000000000,  0.0000000000]
dposN bounds after reset: [-0.0000000000,  0.0000000000]
dposN remainder after reset: [-0.0000000000,  0.0000000000]
dthetaN bounds after reset: [-0.0000000000,  0.0000000000]
dthetaN remainder after reset: [-0.0000000000,  0.0000000000]
costN bounds after reset: [-0.0000000000,  0.0000000000]
costN remainder after reset: [-0.0000000000,  0.0000000000]
clockG bounds after reset: [-0.0000000000,  0.0000029297]
clockG remainder after reset: [-0.0000014648,  0.0000014648]
clock bounds after reset: [-0.0000000000,  0.0000009766]
clock remainder after reset: [-0.0000004883,  0.0000004883]
Done.
custom output: from: DNN1, to: error1, jumps execuded: 2, branch id: 1, jump id: 8 
Dealing with the jump from DNN1 to error1 ...
jumps = 2
branch id: 1
No intersection detected.
Done.
custom output: from: DNN1, to: error2, jumps execuded: 2, branch id: 1, jump id: 9 
Dealing with the jump from DNN1 to error2 ...
jumps = 2
branch id: 1
No intersection detected.
Done.
mode: environmmentD_environmentN,	time = 0.001000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.002000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.003000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.004000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.005000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.006000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.007000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.008000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.009000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.010000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.011000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.012000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.013000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.014000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.015000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.016000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.017000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.018000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.019000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.020000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.021000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.022000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.023000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.024000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.025000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.026000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.027000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.028000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.029000,	step = 0.001000,	order = 3
mode: environmmentD_environmentN,	time = 0.030000,	step = 0.001000,	order = 3

Computation completed: 34 flowpipe(s) computed.

[1mResult of the safety verification on the computed flowpipes: [0m[1m[31mUNSAFE

[0mTotal time cost:[1m 19.391040[0m seconds.

Preparing for plotting and dumping...
[1m%100
[0mDone.
Generating the plotting file...
[1m%[0m[1m  2[0m[1m%[0m[1m  5[0m[1m%[0m[1m  8[0m[1m%[0m[1m 11[0m[1m%[0m[1m 14[0m[1m%[0m[1m 17[0m[1m%[0m[1m 20[0m[1m%[0m[1m 23[0m[1m%[0m[1m 26[0m[1m%[0m[1m 29[0m[1m%[0m[1m 32[0m[1m%[0m[1m 35[0m[1m%[0m[1m 38[0m[1m%[0m[1m 41[0m[1m%[0m[1m 44[0m[1m%[0m[1m 47[0m[1m%[0m[1m 50[0m[1m%[0m[1m 52[0m[1m%[0m[1m 55[0m[1m%[0m[1m 58[0m[1m%[0m[1m 61[0m[1m%[0m[1m 64[0m[1m%[0m[1m 67[0m[1m%[0m[1m 70[0m[1m%[0m[1m 73[0m[1m%[0m[1m 76[0m[1m%[0m[1m 79[0m[1m%[0m[1m 82[0m[1m%[0m[1m 85[0m[1m%[0m[1m 88[0m[1m%[0m[1m 91[0m[1m%[0m[1m 94[0m[1m%[0m[1m 97[0m[1m%[0m[1m100[0m[1m%100
[0mDone.
Writing the flowpipe(s)...
JSON PRINTED HERE
{
"mode": "initD_initN", 
"modeID": 2,
"jumpID":0,
"interval": [0.000000, 0.000000], 
"children": [
{
"mode": "_DNN1", 
"modeID": 0,
"jumpID":2,
"interval": [0.000000, 0.000001], 
"children": [
{
"mode": "DNN1", 
"modeID": 1,
"jumpID":1,
"interval": [0.000000, 0.000001], 
"children": [
{
"mode": "environmmentD_environmentN", 
"modeID": 3,
"jumpID":3,
"interval": [0.000000, 0.000001], 
"children": [
]
}
,{
"mode": "environmmentD_environmentN", 
"modeID": 3,
"jumpID":4,
"interval": [0.000000, 0.000001], 
"children": [
]
}
,{
"mode": "environmmentD_environmentN", 
"modeID": 3,
"jumpID":5,
"interval": [0.000000, 0.000001], 
"children": [
]
}
,{
"mode": "environmmentD_environmentN", 
"modeID": 3,
"jumpID":6,
"interval": [0.000000, 0.000001], 
"children": [
]
}
,{
"mode": "environmmentD_environmentN", 
"modeID": 3,
"jumpID":7,
"interval": [0.000000, 0.000001], 
"children": [
]
}
]
}
]
}
]
}
Done.
total branches: 5
dnn runtime: 15.436977

Initial conditions:
